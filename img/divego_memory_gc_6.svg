<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1406px" height="1761px" viewBox="-0.5 -0.5 1406 1761" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 845 225 Q 890 225 890 565 Q 890 905 928.63 905" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 933.88 905 L 926.88 908.5 L 928.63 905 L 926.88 901.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 543px; margin-left: 890px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; "><font face="Comic Sans MS">gcController</font></div></div></div></foreignObject><text x="890" y="546" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">gcController</text></switch></g><path d="M 489 225 Q 489 225 412.37 225" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 407.12 225 L 414.12 221.5 L 412.37 225 L 414.12 228.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 489 50 L 489 49.8 L 498.89 49.83 L 508.78 50.34 L 518.67 50.1 L 528.56 50.01 L 538.44 49.55 L 548.33 50.04 L 558.22 49.49 L 568.11 49.64 L 578 49.44 L 587.89 49.29 L 597.78 50.7 L 607.67 50.71 L 617.56 50.74 L 627.44 49.35 L 637.33 50.26 L 647.22 49.44 L 657.11 49.31 L 667 49.33 L 676.89 50.09 L 686.78 50.09 L 696.67 49.62 L 706.56 50.24 L 716.44 50.22 L 726.33 50.59 L 736.22 49.25 L 746.11 50.74 L 756 49.34 L 765.89 50.37 L 775.78 50.28 L 785.67 50.61 L 795.56 49.97 L 805.44 49.71 L 815.33 49.5 L 825.22 50.52 L 835.11 50.41 L 845 50 L 845.16 50 L 844.68 60 L 844.75 70 L 844.79 80 L 844.25 90 L 844.73 100 L 844.64 110 L 845.5 120 L 844.94 130 L 845.58 140 L 844.92 150 L 845.31 160 L 845.37 170 L 845.62 180 L 844.85 190 L 844.35 200 L 844.73 210 L 844.65 220 L 844.34 230 L 844.56 240 L 845.28 250 L 845.4 260 L 845.34 270 L 845.47 280 L 844.52 290 L 844.31 300 L 845.63 310 L 844.99 320 L 845.68 330 L 844.75 340 L 845.5 350 L 844.58 360 L 845.4 370 L 844.81 380 L 844.6 390 L 845 400 L 845 400.11 L 835.11 399.32 L 825.22 400.66 L 815.33 399.59 L 805.44 399.34 L 795.56 400.48 L 785.67 400.01 L 775.78 399.84 L 765.89 399.33 L 756 399.5 L 746.11 399.51 L 736.22 400.66 L 726.33 400.3 L 716.44 400.04 L 706.56 399.42 L 696.67 400.68 L 686.78 399.73 L 676.89 400.15 L 667 399.88 L 657.11 399.94 L 647.22 400.04 L 637.33 399.7 L 627.44 400.31 L 617.56 400.67 L 607.67 399.43 L 597.78 400.38 L 587.89 400.52 L 578 400.07 L 568.11 399.49 L 558.22 400.21 L 548.33 399.49 L 538.44 400.08 L 528.56 399.39 L 518.67 400.74 L 508.78 399.35 L 498.89 400.39 L 489 400 L 489.44 400 L 489.16 390 L 488.35 380 L 488.85 370 L 489.29 360 L 489.07 350 L 489.56 340 L 488.47 330 L 488.38 320 L 489.52 310 L 488.49 300 L 489.38 290 L 488.42 280 L 488.87 270 L 489.22 260 L 488.6 250 L 489.47 240 L 489.24 230 L 488.36 220 L 488.84 210 L 489.68 200 L 489.59 190 L 489.3 180 L 489.05 170 L 488.25 160 L 489.57 150 L 489.41 140 L 489.27 130 L 488.4 120 L 488.63 110 L 489.04 100 L 489.3 90 L 488.92 80 L 489.66 70 L 488.26 60 L 489 50 L 489 50 Z Z" fill="#fad7ac" stroke="#b46504" stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 348px; height: 1px; padding-top: 40px; margin-left: 494px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 360px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><h1><font face="Comic Sans MS">runtime 中与 gc 相关的全局变量</font></h1><p><font face="Comic Sans MS">① gcphase：垃圾收集器当前所处阶段，Goroutine 在读取或者修改该阶段时需要保证原子性。取值：_GCoff / _GCmark / _GCmarktermination</font><br /></p><font face="Comic Sans MS">② gcblackenEnabled：一个布尔值。当垃圾收集处于标记阶段时，会将该变量置为 1。此时，辅助垃圾收集的用户程序和后台标记的任务可以将对象涂黑<br /><br />③ gcpercent：触发垃圾收集的内存增长百分比。默认值：100（表示堆内存相比上次垃圾收集增长 100% 时应触发 GC，并行的垃圾手机器会在到达该目标前完成垃圾收集）<br /><br />④ worldsema：全局的信号量。获取该信号量的线程有权利暂停当前应用程序。<br /></font><p><font face="Comic Sans MS">⑤ forcegc</font></p><p><font face="Comic Sans MS">⑥</font></p><p><font face="Comic Sans MS">⑦</font></p></div></div></div></foreignObject><text x="494" y="52" fill="#000000" font-family="Helvetica" font-size="12px">runtime 中与 gc 相关的全局变量...</text></switch></g><path d="M 40 85 L 40 84.28 L 49.89 84.59 L 59.78 84.28 L 69.68 85.6 L 79.57 84.57 L 89.46 84.99 L 99.35 85.65 L 109.24 85.47 L 119.14 84.78 L 129.03 85.69 L 138.92 85.02 L 148.81 84.53 L 158.7 84.26 L 168.59 84.35 L 178.49 84.85 L 188.38 84.99 L 198.27 84.95 L 208.16 85.35 L 218.05 85.69 L 227.95 84.29 L 237.84 84.76 L 247.73 85.5 L 257.62 85.16 L 267.51 84.85 L 277.41 85.41 L 287.3 85.14 L 297.19 85.71 L 307.08 85.53 L 316.97 85.68 L 326.86 85.12 L 336.76 84.56 L 346.65 84.3 L 356.54 84.97 L 366.43 85.45 L 376.32 84.98 L 386.22 85.08 L 396.11 84.61 L 406 85 L 405.65 85 L 406 95 L 405.37 105 L 406.23 115 L 405.93 125 L 406.68 135 L 405.35 145 L 405.28 155 L 405.29 165 L 405.86 175 L 406.16 185 L 405.53 195 L 406.34 205 L 405.34 215 L 405.62 225 L 406.24 235 L 406.75 245 L 405.36 255 L 406.7 265 L 405.93 275 L 405.39 285 L 406.04 295 L 405.93 305 L 405.42 315 L 406.2 325 L 406.14 335 L 406.64 345 L 406.23 355 L 406 365 L 406 364.7 L 396.11 364.88 L 386.22 364.36 L 376.32 365.21 L 366.43 365.6 L 356.54 365.66 L 346.65 364.27 L 336.76 364.86 L 326.86 364.87 L 316.97 365.17 L 307.08 365.46 L 297.19 365.48 L 287.3 365.4 L 277.41 364.84 L 267.51 365.04 L 257.62 365.16 L 247.73 365.03 L 237.84 365.33 L 227.95 364.28 L 218.05 365.61 L 208.16 365 L 198.27 364.99 L 188.38 365.09 L 178.49 365.28 L 168.59 365.73 L 158.7 364.69 L 148.81 364.55 L 138.92 364.44 L 129.03 364.47 L 119.14 364.74 L 109.24 365.48 L 99.35 364.75 L 89.46 365.59 L 79.57 364.71 L 69.68 364.84 L 59.78 364.39 L 49.89 364.83 L 40 365 L 40.32 365 L 40.68 355 L 39.63 345 L 40.19 335 L 40.64 325 L 39.8 315 L 39.67 305 L 39.53 295 L 40.25 285 L 40.14 275 L 39.29 265 L 40.17 255 L 40.17 245 L 39.68 235 L 39.71 225 L 40.68 215 L 39.3 205 L 39.5 195 L 40.17 185 L 39.86 175 L 39.64 165 L 39.55 155 L 40.71 145 L 40.17 135 L 40.55 125 L 39.43 115 L 39.66 105 L 40.41 95 L 40 85 L 40 85 Z Z" fill="#f9f7ed" stroke="#36393d" stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 358px; height: 1px; padding-top: 75px; margin-left: 45px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 290px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><h1><font face="Comic Sans MS">var runtime.writeBarrier</font></h1><p><font face="Comic Sans MS">// 一个包含写屏障状态的结构体</font></p><p><font face="Comic Sans MS">struct {</font></p><p><font face="Comic Sans MS"><span>	</span>enabled bool    // 表示写屏障的开启与关闭</font></p><p><font face="Comic Sans MS"><span>	</span>pad     [3]byte // compiler uses 32-bit load for "enabled" field</font></p><p><font face="Comic Sans MS"><span>	</span>needed  bool    // 表示当前 GC 阶段是否需要写屏障</font></p><p><font face="Comic Sans MS"><span>	</span>cgo     bool    // 对于 cgo 检查是否需要写屏障</font></p><p><font face="Comic Sans MS"><span>	</span>alignme uint64  // guarantee alignment so that compiler can use a 32 or 64-bit load</font></p><p><font face="Comic Sans MS">}</font></p></div></div></div></foreignObject><text x="45" y="87" fill="#000000" font-family="Helvetica" font-size="12px">var runtime.writeBarrier...</text></switch></g><path d="M 935 50 L 935 49.56 L 945 50.56 L 955 50.67 L 965 49.47 L 975 49.97 L 985 50.64 L 995 50.01 L 1005 50.6 L 1015 49.85 L 1025 50.05 L 1035 49.79 L 1045 49.76 L 1055 49.62 L 1065 49.55 L 1075 49.52 L 1085 49.45 L 1095 49.66 L 1105 49.9 L 1115 49.32 L 1125 49.76 L 1135 50.44 L 1145 50.07 L 1155 49.41 L 1165 49.67 L 1175 49.96 L 1185 50.39 L 1195 50.37 L 1205 50.4 L 1215 50.34 L 1225 49.59 L 1235 50.08 L 1245 49.57 L 1255 49.37 L 1265 49.84 L 1275 50.51 L 1285 50.37 L 1295 49.56 L 1305 50.71 L 1315 49.9 L 1325 50.59 L 1335 49.59 L 1345 49.83 L 1355 50.09 L 1365 49.38 L 1375 50.34 L 1385 50.12 L 1395 50.04 L 1405 50 L 1405.06 50 L 1404.59 60 L 1404.56 70 L 1404.39 80 L 1405.5 90 L 1404.94 100 L 1404.92 110 L 1404.65 120 L 1405.05 130 L 1405.25 140 L 1405.17 150 L 1404.77 160 L 1405 170 L 1405.27 180 L 1404.88 190 L 1405.38 200 L 1405.39 210 L 1404.7 220 L 1405.56 230 L 1404.61 240 L 1405.19 250 L 1405.54 260 L 1405.01 270 L 1404.56 280 L 1404.72 290 L 1404.26 300 L 1404.59 310 L 1404.44 320 L 1405.69 330 L 1404.5 340 L 1405.32 350 L 1405.45 360 L 1405.38 370 L 1405.22 380 L 1405.3 390 L 1405.18 400 L 1405.41 410 L 1405.61 420 L 1405.55 430 L 1405.51 440 L 1404.81 450 L 1404.55 460 L 1404.4 470 L 1404.49 480 L 1404.63 490 L 1405.1 500 L 1405.21 510 L 1405.61 520 L 1404.25 530 L 1405.43 540 L 1405.24 550 L 1404.42 560 L 1405.01 570 L 1405.42 580 L 1404.68 590 L 1405.07 600 L 1405.31 610 L 1405.44 620 L 1404.63 630 L 1404.85 640 L 1405.55 650 L 1405.04 660 L 1404.86 670 L 1405.67 680 L 1405.27 690 L 1405.14 700 L 1405.73 710 L 1404.6 720 L 1405.13 730 L 1404.88 740 L 1404.32 750 L 1404.37 760 L 1405.28 770 L 1404.66 780 L 1404.78 790 L 1404.91 800 L 1405.41 810 L 1405.21 820 L 1404.29 830 L 1404.57 840 L 1405.06 850 L 1404.32 860 L 1405.35 870 L 1404.92 880 L 1404.71 890 L 1404.57 900 L 1405.22 910 L 1405.3 920 L 1404.97 930 L 1404.72 940 L 1404.98 950 L 1404.49 960 L 1404.79 970 L 1404.31 980 L 1404.84 990 L 1404.38 1000 L 1405.66 1010 L 1405.19 1020 L 1405.52 1030 L 1404.38 1040 L 1404.48 1050 L 1405.09 1060 L 1405.16 1070 L 1405.72 1080 L 1405.74 1090 L 1405.39 1100 L 1404.62 1110 L 1404.85 1120 L 1404.59 1130 L 1405.66 1140 L 1405.59 1150 L 1405.1 1160 L 1404.89 1170 L 1404.85 1180 L 1405.57 1190 L 1404.35 1200 L 1404.55 1210 L 1404.62 1220 L 1404.66 1230 L 1404.99 1240 L 1405.43 1250 L 1405.46 1260 L 1405.53 1270 L 1405.34 1280 L 1405.34 1290 L 1404.53 1300 L 1404.47 1310 L 1405.66 1320 L 1404.47 1330 L 1404.54 1340 L 1404.65 1350 L 1405.5 1360 L 1404.84 1370 L 1405.51 1380 L 1404.73 1390 L 1405.15 1400 L 1405.24 1410 L 1404.75 1420 L 1405.56 1430 L 1405.19 1440 L 1405.26 1450 L 1404.76 1460 L 1405.36 1470 L 1404.52 1480 L 1405.48 1490 L 1405.48 1500 L 1404.64 1510 L 1404.29 1520 L 1404.25 1530 L 1404.5 1540 L 1404.42 1550 L 1404.78 1560 L 1404.4 1570 L 1404.29 1580 L 1405.49 1590 L 1404.9 1600 L 1405.65 1610 L 1405.68 1620 L 1405.54 1630 L 1404.83 1640 L 1404.46 1650 L 1405.56 1660 L 1404.65 1670 L 1405.35 1680 L 1405.04 1690 L 1405.51 1700 L 1405.46 1710 L 1404.28 1720 L 1405.12 1730 L 1405 1740 L 1404.31 1750 L 1405 1760 L 1405 1760.52 L 1395 1759.88 L 1385 1760.32 L 1375 1760.55 L 1365 1760.61 L 1355 1760.22 L 1345 1759.7 L 1335 1759.53 L 1325 1760.31 L 1315 1760.19 L 1305 1760.24 L 1295 1759.53 L 1285 1759.85 L 1275 1759.94 L 1265 1759.33 L 1255 1759.78 L 1245 1759.44 L 1235 1760.48 L 1225 1759.46 L 1215 1759.96 L 1205 1759.61 L 1195 1759.48 L 1185 1760.72 L 1175 1759.98 L 1165 1760.44 L 1155 1760.33 L 1145 1759.64 L 1135 1760.11 L 1125 1759.72 L 1115 1760.37 L 1105 1759.59 L 1095 1759.88 L 1085 1760.44 L 1075 1760.48 L 1065 1759.91 L 1055 1760.55 L 1045 1760.22 L 1035 1760.25 L 1025 1760.63 L 1015 1760.21 L 1005 1759.88 L 995 1760.69 L 985 1759.32 L 975 1759.33 L 965 1759.77 L 955 1760.59 L 945 1759.61 L 935 1760 L 934.6 1760 L 935.5 1750 L 934.66 1740 L 934.63 1730 L 935.44 1720 L 934.9 1710 L 935.43 1700 L 934.71 1690 L 935.29 1680 L 935.53 1670 L 935.58 1660 L 935.37 1650 L 934.6 1640 L 934.51 1630 L 935.59 1620 L 935.66 1610 L 934.36 1600 L 934.66 1590 L 935.31 1580 L 935.56 1570 L 934.85 1560 L 934.86 1550 L 935.65 1540 L 934.59 1530 L 935.14 1520 L 934.9 1510 L 935.65 1500 L 935.7 1490 L 934.89 1480 L 935.53 1470 L 934.34 1460 L 935.07 1450 L 935.67 1440 L 935.55 1430 L 935.73 1420 L 934.66 1410 L 934.56 1400 L 935.29 1390 L 935.62 1380 L 934.59 1370 L 934.85 1360 L 935.23 1350 L 934.55 1340 L 934.82 1330 L 934.72 1320 L 934.82 1310 L 935.15 1300 L 935.74 1290 L 935.14 1280 L 935.26 1270 L 934.26 1260 L 935.66 1250 L 935.17 1240 L 935.74 1230 L 935.16 1220 L 934.37 1210 L 935.57 1200 L 935.02 1190 L 934.67 1180 L 934.53 1170 L 935.19 1160 L 935.56 1150 L 935.35 1140 L 935.71 1130 L 935.53 1120 L 934.44 1110 L 935.33 1100 L 935.71 1090 L 934.28 1080 L 934.65 1070 L 935.6 1060 L 935.63 1050 L 934.96 1040 L 934.66 1030 L 934.32 1020 L 935.48 1010 L 934.35 1000 L 934.88 990 L 935.55 980 L 935.7 970 L 935.02 960 L 934.63 950 L 935.71 940 L 934.92 930 L 935.02 920 L 934.68 910 L 935.08 900 L 934.52 890 L 934.94 880 L 935.62 870 L 934.52 860 L 935.43 850 L 935.2 840 L 934.95 830 L 934.64 820 L 934.59 810 L 934.77 800 L 934.98 790 L 934.31 780 L 934.61 770 L 934.38 760 L 934.41 750 L 935.04 740 L 934.55 730 L 935.68 720 L 934.96 710 L 935.04 700 L 935.51 690 L 934.33 680 L 934.61 670 L 934.37 660 L 934.53 650 L 935.35 640 L 934.78 630 L 935.61 620 L 934.79 610 L 934.27 600 L 935.47 590 L 934.8 580 L 934.45 570 L 935.35 560 L 934.98 550 L 934.43 540 L 934.72 530 L 935.11 520 L 934.46 510 L 934.39 500 L 934.6 490 L 934.86 480 L 934.43 470 L 934.3 460 L 934.5 450 L 935.52 440 L 934.58 430 L 935.06 420 L 935.31 410 L 934.73 400 L 934.48 390 L 934.76 380 L 934.37 370 L 935.32 360 L 934.31 350 L 935.58 340 L 934.43 330 L 935.03 320 L 934.83 310 L 935.57 300 L 935.68 290 L 934.86 280 L 934.41 270 L 935.14 260 L 934.37 250 L 934.67 240 L 935.7 230 L 934.32 220 L 935.6 210 L 934.44 200 L 934.7 190 L 935.01 180 L 935.32 170 L 935.42 160 L 934.25 150 L 934.89 140 L 935.19 130 L 934.82 120 L 935.6 110 L 935.1 100 L 934.79 90 L 934.5 80 L 935.62 70 L 935.64 60 L 935 50 L 935 50 Z Z" fill="#cdeb8b" stroke="#36393d" stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 462px; height: 1px; padding-top: 40px; margin-left: 940px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; max-height: 1720px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><h1><font face="Comic Sans MS">runtime.gcControllerState</font></h1><p><font face="Comic Sans MS">// 实现垃圾收集的调步算法，能够决定触发并行垃圾收集的时间和待处理的工作</font></p><p><font face="Comic Sans MS">type gcControllerState struct {</font></p><p><font face="Comic Sans MS"><span>	</span>// scanWork is the total scan work performed this cycle. This</font></p><p><font face="Comic Sans MS"><span>	</span>// is updated atomically during the cycle. Updates occur in</font></p><p><font face="Comic Sans MS"><span>	</span>// bounded batches, since it is both written and read</font></p><p><font face="Comic Sans MS"><span>	</span>// throughout the cycle. At the end of the cycle, this is how</font></p><p><font face="Comic Sans MS"><span>	</span>// much of the retained heap is scannable.</font></p><p><font face="Comic Sans MS"><span>	</span>//</font></p><p><font face="Comic Sans MS"><span>	</span>// Currently this is the bytes of heap scanned. For most uses,</font></p><p><font face="Comic Sans MS"><span>	</span>// this is an opaque unit of work, but for estimation the</font></p><p><font face="Comic Sans MS"><span>	</span>// definition is important.</font></p><p><font face="Comic Sans MS"><span>	</span>scanWork int64</font></p><p><font face="Comic Sans MS"><span>	</span>// bgScanCredit is the scan work credit accumulated by the</font></p><p><font face="Comic Sans MS"><span>	</span>// concurrent background scan. This credit is accumulated by</font></p><p><font face="Comic Sans MS"><span>	</span>// the background scan and stolen by mutator assists. This is</font></p><p><font face="Comic Sans MS"><span>	</span>// updated atomically. Updates occur in bounded batches, since</font></p><p><font face="Comic Sans MS"><span>	</span>// it is both written and read throughout the cycle.</font></p><p><font face="Comic Sans MS"><span>	</span>bgScanCredit int64</font></p><p><font face="Comic Sans MS"><span>	</span>// assistTime is the nanoseconds spent in mutator assists</font></p><p><font face="Comic Sans MS"><span>	</span>// during this cycle. This is updated atomically. Updates</font></p><p><font face="Comic Sans MS"><span>	</span>// occur in bounded batches, since it is both written and read</font></p><p><font face="Comic Sans MS"><span>	</span>// throughout the cycle.</font></p><p><font face="Comic Sans MS"><span>	</span>assistTime int64</font></p><p><font face="Comic Sans MS"><span>	</span>// dedicatedMarkTime is the nanoseconds spent in dedicated</font></p><p><font face="Comic Sans MS"><span>	</span>// mark workers during this cycle. This is updated atomically</font></p><p><font face="Comic Sans MS"><span>	</span>// at the end of the concurrent mark phase.</font></p><p><font face="Comic Sans MS"><span>	</span>dedicatedMarkTime int64</font></p><p><font face="Comic Sans MS"><span>	</span>// fractionalMarkTime is the nanoseconds spent in the</font></p><p><font face="Comic Sans MS"><span>	</span>// fractional mark worker during this cycle. This is updated</font></p><p><font face="Comic Sans MS"><span>	</span>// atomically throughout the cycle and will be up-to-date if</font></p><p><font face="Comic Sans MS"><span>	</span>// the fractional mark worker is not currently running.</font></p><p><font face="Comic Sans MS"><span>	</span>fractionalMarkTime int64</font></p><p><font face="Comic Sans MS"><span>	</span>// idleMarkTime is the nanoseconds spent in idle marking</font></p><p><font face="Comic Sans MS"><span>	</span>// during this cycle. This is updated atomically throughout</font></p><p><font face="Comic Sans MS"><span>	</span>// the cycle.</font></p><p><font face="Comic Sans MS"><span>	</span>idleMarkTime int64</font></p><p><span style="font-family: &quot;comic sans ms&quot;">// markStartTime is the absolute start time in nanoseconds</span><br /></p><p><font face="Comic Sans MS"><span>	</span>// that assists and background mark workers started.</font></p><p><font face="Comic Sans MS"><span>	</span>markStartTime int64</font></p><p><font face="Comic Sans MS"><span>	</span>// 表示需要启动的专门负责标记的 worker 数目。</font></p><p><font face="Comic Sans MS"><span>	</span>// 会在每次循环的开头（runtime.gcController.startCycle() ）进行计算</font></p><p><font face="Comic Sans MS"><span>	</span>dedicatedMarkWorkersNeeded int64</font></p><p><font face="Comic Sans MS"><span>	</span>// assistWorkPerByte is the ratio of scan work to allocated</font></p><p><font face="Comic Sans MS"><span>	</span>// bytes that should be performed by mutator assists. This is</font></p><p><font face="Comic Sans MS"><span>	</span>// computed at the beginning of each cycle and updated every</font></p><p><font face="Comic Sans MS"><span>	</span>// time heap_scan is updated.</font></p><p><font face="Comic Sans MS"><span>	</span>assistWorkPerByte float64</font></p><p><font face="Comic Sans MS"><span>	</span>// assistBytesPerWork is 1/assistWorkPerByte.</font></p><p><font face="Comic Sans MS"><span>	</span>assistBytesPerWork float64</font></p><p><font face="Comic Sans MS"><span>	</span>// 表示每个不运行专属 worker 的处理器应该花在 "fractional" 标记的时间。</font></p><p><font face="Comic Sans MS"><span>	</span>// 会在每次循环的开头（runtime.gcController.startCycle() ）根据 CPU 利用率进行计算：</font></p><p><font face="Comic Sans MS"><span>	</span>// fractionalUtilizationGoal = (totalUtilizationGoal - dedicatedMarkWorkersNeeded) / gomaxprocs</font></p><p><font face="Comic Sans MS"><span>	</span>// 0 表示不需要</font></p><p><font face="Comic Sans MS"><span>	</span>// For example, if the utilization goal is 25% and there are</font></p><p><font face="Comic Sans MS"><span>	</span>// no dedicated workers, this will be 0.25. If the goal is</font></p><p><font face="Comic Sans MS"><span>	</span>// 25%, there is one dedicated worker, and GOMAXPROCS is 5,</font></p><p><font face="Comic Sans MS"><span>	</span>// this will be 0.05 to make up the missing 5%.</font></p><p><font face="Comic Sans MS"><span>	</span>fractionalUtilizationGoal float64</font></p><p><font face="Comic Sans MS"><span>	</span>_ cpu.CacheLinePad</font></p><p><font face="Comic Sans MS">}</font></p></div></div></div></foreignObject><text x="940" y="52" fill="#000000" font-family="Helvetica" font-size="12px">runtime.gcControllerState...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://desk.draw.io/support/solutions/articles/16000042487" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>